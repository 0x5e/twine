module Twine
  module Formatters
    class Apple < Abstract
      FORMAT_NAME = 'apple'
      EXTENSION = '.strings'
      DEFAULT_FILE_NAME = 'Localizable.strings'

      def self.can_handle_directory?(path)
        Dir.entries(path).any? { |item| /^.+\.lproj$/.match(item) }
      end

      def default_file_name
        return DEFAULT_FILE_NAME
      end

      def determine_language_given_path(path)
        path_arr = path.split(File::SEPARATOR)
        path_arr.each do |segment|
          match = /^(.+)\.lproj$/.match(segment)
          if match
            return match[1]
          end
        end

        return
      end

      def read_file(path, lang, strings)
        File.open(path, 'r:UTF-8') do |f|
          while line = f.gets
            match = /"((?:[^"\\]|\\.)+)"\s*=\s*"((?:[^"\\]|\\.)*)/.match(line)
            if match
              key = match[1]
              key.gsub!('\\"', '"')
              if strings.strings_map.include? key
                value = match[2]
                value.gsub!('\\"', '"')
                strings.strings_map[key].translations[lang] = value
              else
                puts "#{key} not found in strings data file."
              end
            end
          end
        end
      end

      def write_file(path, lang, tags, strings)
        default_lang = strings.language_codes[0]
        File.open(path, 'w:UTF-8') do |f|
          f.puts "/**\n * iOS Strings File\n * Generated by Twine\n * Language: #{lang}\n */"
          strings.sections.each do |section|
            f.puts "\n/* #{section.name} */"
            section.rows.each do |row|
              if row_matches_tags?(row, tags)
                key = row.key
                key = key.gsub('"', '\\\\"')

                value = translated_string_for_row_and_lang(row, lang, default_lang)
                value = value.gsub('"', '\\\\"')

                comment = row.comment
                if comment
                  comment = comment.gsub('*/', '* /')
                end

                f.print "\"#{key}\" = \"#{value}\";"
                if comment && comment.length > 0
                  f.print "  /* #{comment} */\n"
                else
                  f.print "\n"
                end
              end
            end
          end
        end
      end
    end
  end
end
